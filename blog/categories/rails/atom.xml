<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | Adventures Into Code]]></title>
  <link href="http://dolin.github.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://dolin.github.com/"/>
  <updated>2013-04-24T18:30:36-04:00</updated>
  <id>http://dolin.github.com/</id>
  <author>
    <name><![CDATA[Danny Olinsky]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Code and the Learning Curve]]></title>
    <link href="http://dolin.github.com/blog/2013/04/09/code-and-the-learning-curve/"/>
    <updated>2013-04-09T19:24:00-04:00</updated>
    <id>http://dolin.github.com/blog/2013/04/09/code-and-the-learning-curve</id>
    <content type="html"><![CDATA[<p><a href="https://play.google.com/store/apps/details?id=com.westriversw.b1to50&hl=en">1 to 50</a>. One of the simplest, but most addicting apps out there. A couple students told me about the game a few weeks back and ever since it has become my go-to for killing time on the subway. The concept is simple: find and click the numbers on the grid in order from 1 to 50 as fast as possible.</p>

<p><img src="http://dolin.github.com/images/1to50.jpg"></p>

<p>My first few results were quite bad. 50 seconds. 48 seconds. 47 seconds. However, without consciously trying, my brain quickly adapted to the task at hand. It began looking for patterns, seeking the fastest way to complete the puzzle based on my prior experience. My eyes began to scan the complete grid instead of looking and pecking for individual numbers. Groups of numbers started appearing and within 10 tries I had cut my time average time down to 34 seconds. Unfortunately, I've now had the app for two weeks and can't seem to beat my high score from a week ago of 26 seconds.</p>

<p>What happened? Why can't I keep learning at the same pace? Turns out, 1 to 50 follows Hermann Ebbinghaus' learning curve.</p>

<p><img src="http://dolin.github.com/images/lcurve.png"></p>

<p>1 to 50 is a simple a simple skill. I learned most of what I could learn in a short period of time and have asymptoted out.</p>

<p>How does this apply at all to code?</p>

<p>At first, I came to the conclusion that code follows a similiar learning curve. A beginner coder is a sponge ready to absorb and retain all information thrown his or her way. Wrong. Coding follows the S-Curve.</p>

<p><img src="http://dolin.github.com/images/scurve.png"></p>

<p>In this situation, learning starts off slowly and once a foundation is built, begins to increase rapidly. I'd guess that this is the exact reason why Flatiron assigns 100 hours of pre-work before the program starts. It takes time to prep your brain for learning how to code. However, once you make your way out of the weeds, the pieces begin to fall into place. As with 1 to 50, your brain subconsciously looks for, detects, and provides meaning to patterns based on past experiences.</p>

<p>Steve Klabnik alluded to this concept when he came in to speak to the class. While I don't remember the exact quote, it went something like, "The difference between beginner coders and advanced coders is their ability to spot patterns."</p>

<p>This idea rang true for me over the weekend. I've been building an online coding activity tracker with my group over the past few weeks. The app let's you track your own progress as well as compare yourself to students in your class. Building the intial database schema along with the ability for users to create/join classes took a couple days. It was our first real foray into rails. Here's a shot three weeks in. Props to <a href="http://students.flatironschool.com/tyler-davis">Tyler Davis</a> for the awesome design.</p>

<p><img src="http://dolin.github.com/images/starboard.png"></p>

<p>Fast forward to this past weekend when myself and two other students decided to start on a hackathon organizer and listings app called Codewithus. Although the tables are named differently, the basic functionality of being able to create a hackathon, invite people to the hackathon, and join other hackathons is the same. Instead of a day to discuss and build the database schema, it took us 45 minutes. Instead of a day to build out the initial views and the basic functionality, it took us 2 hours (excuse my minimal design skills). Stepping back from the project, I've realized just how much myself and the rest of the class has learned in a short time period.</p>

<p><img src="http://dolin.github.com/images/codewithus.png"></p>

<p>While there's a never ending amount amount of articles to read, languages to learn, and features to implement, it feels good to know we're climbing up the curve.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding Nested Attributes]]></title>
    <link href="http://dolin.github.com/blog/2013/03/17/understanding-nested-attributes/"/>
    <updated>2013-03-17T15:06:00-04:00</updated>
    <id>http://dolin.github.com/blog/2013/03/17/understanding-nested-attributes</id>
    <content type="html"><![CDATA[<p>Let's talk about rails' accepts_nested_attributes_for method.</p>

<p><strong>What is it?</strong></p>

<p>According to Rails API, the method allows you to 'save attributes on associated records through the parent.''</p>

<p><strong>What does that mean and why should you use it?</strong></p>

<p>Using an example from class, let's pretend you're creating an app built around horse races. In your app, you have a race model and a horse model. A race has a name and a horse has a name, number, and starting position.</p>

<p>You also have a view to create a new race. When you create a new race you want to populate the race with horses. For simplicity sake, we'll only populate the race with one horse for now.</p>

<p>You soon realize that you can't figure out a way to create a new horse within a race using the form_for @race helper.</p>

<p><strong>Enter accepts_nested_attributes_for.</strong></p>

<p>Essentially, the method allows you to create a new instance of a horse with it's respective attributes at the exact same time of creating the 'parent' race.</p>

<p>Enter the following into your race model (I am assuming you have already setup the respective database associations):</p>

<p><img src='images/horses1.png'></p>

<p>Enter the following into your new race view:</p>

<p>``` erb</p>

<p>&lt;%= form_for @race do |f| %></p>

<p>  <p>Name &lt;%= f.text_field :name %></p>
  <p>Description &lt;%= f.text_field :description %></p></p>

<p>   &lt;%= f.fields_for :horses do |h| %></p>

<pre><code>&lt;p&gt;Horse Name &lt;%= h.text_field :name %&gt;&lt;/p&gt;
&lt;p&gt;Horse Number &lt;%= h.number_field :number %&gt;&lt;/p&gt;
&lt;p&gt;Horse Position &lt;%= h.number_field :position %&gt;&lt;/p&gt;
</code></pre>

<p>  &lt;% end %></p>

<p>  &lt;%= f.submit %></p>

<p>&lt;% end %></p>

<p>```</p>

<p>Let's inspect one of the attribute fields for the horse.</p>

<p><img src='images/horses2.png'></p>

<p>If we click on 'Create Race' and raise params before the race is saved, we will get the following:</p>

<p><img src='images/horses3.png'></p>

<p>As you can see, the paramaters being passed through to the controller for a horse come in the form of race[horses_attributes][0][{attribute}]. horses_attributes is a hash nested within params[:race]</p>

<p>Make sure your create action in your race controller looks something like this:</p>

<p>``` ruby</p>

<p>  def create</p>

<pre><code>  @race = Race.new(params[:race])

  if @race.save
    redirect_to @race, notice: 'Race was successfully created.'
  else
    render action: "new"
  end 
</code></pre>

<p>  end</p>

<p>```</p>

<p>Just like that you'll be able to create horses within your races thanks to mass-assignment. Now let's look at what the method is actually doing.</p>

<h4>1st level of abstraction down:</h4>

<p>Instead of using 'accepts_nested_attributes_for', we can substitute a writer method in your race model.</p>

<p>``` ruby</p>

<p>class Race &lt; ActiveRecord::Base
  attr_accessible :description, :name</p>

<p>  has_many :horse_races
  has_many :horses, :through => :horse_races</p>

<p>  def horses_attributes=(hash)</p>

<pre><code>hash.each do |horse_index, horse_attributes|
  horse = self.horses.new
  horse_attributes.each do |horse_attribute, attribute_value|
    horse.send("#{horse_attribute}=", attribute_value)
  end
end
</code></pre>

<p>  end</p>

<p>end</p>

<p>```</p>

<p>During mass-assignment from your race controller, the horses_attributes= method will be called and a new horse will be created from this iteration.</p>

<h4>2nd level of abstraction down:</h4>

<p>If you're like me when you first tried to figure out what's going on beneath the hood, you may have written the code in your race controller to handle the task. I initially iterated through the params for both race and horse attributes, assigning the attributes one by one.</p>

<p>``` ruby</p>

<p>class RacesController &lt; ApplicationController</p>

<p>  def create</p>

<pre><code>@race = Race.new()
@race.name = params[:race][:name]
@race.description = params[:race][:description]


params[:race][:horses_attributes].each do |horse_index, horse_data|
  @horse = Horse.new
  @horse.name = horse_data[:name]
  @horse.number = horse_data[:number]
  @horse.position = horse_data[:position]

  @race.horses &lt;&lt; @horse
end

if @race.save
  redirect_to @race, notice: 'Race was successfully created.'
else
  render action: "new"
end
</code></pre>

<p>  end</p>

<p>end</p>

<p>```</p>

<p>This way works to get the job done, but it's best to take the code out of your controller and create a writer method as shown above in your race model. Or better yet, just use the 'accepts_nested_attributes_for' method and don't worry about creating the writer method at all.</p>

<p>I hope this helps for anyone looking to better understand nested attributes. Feel free to comment below if there are any questions!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding Rails' Routes]]></title>
    <link href="http://dolin.github.com/blog/2013/03/04/understanding-rails-routes/"/>
    <updated>2013-03-04T22:03:00-05:00</updated>
    <id>http://dolin.github.com/blog/2013/03/04/understanding-rails-routes</id>
    <content type="html"><![CDATA[<p>We began our foray into Rails last week. As expected, a ton of questions immediately came to mind once diving into a few tutorials. This post will address the routes that Rails automatically builds upon generation of resources and scaffolds.</p>

<p>As a Ruby framework, Rails essentially creates your application's skeleton so that the programmer can get right to building the muscle of the app (not sure if that analogy makes sense, but sounded good at the time).</p>

<p>In creating the skeleton, Rails abstracts out many parts of your application into files that it has already created. For a Ruby newb, this is both incredible and confusing. It's an awesome feeling to be able to startup the rails server, edit the controller, create a view or two with some forms, and automagically see your code in action. But, the hidden logic which lies within a new Rails' application begs the question, "How does all of this actually work?"</p>

<p>While there are a ton of books to learn about the ins and outs of Rails, let's take a look at one small, but extremely important piece: <strong>routes</strong>.</p>

<p>Let's pretend you have created a new rails app for RSVPing to an event. To kick things off, you run the following in terminal to generate a User resource:</p>

<p>```
$ rails generate scaffold User</p>

<p>```</p>

<p>Along with creating a controller, model, migration, and other files, Rails also creates routes for you. Take a look within your config directory and you'll see a 'routes.rb' file. Within the first few lines, you should see something like this:</p>

<p>``` ruby</p>

<p>RsvpApp::Application.routes.draw do</p>

<p>  resources :users</p>

<p>```</p>

<p>This one line of code blew my mind. All of a sudden (if you created the respective views and controller actions), you could navigate to paths such as http://localhost:4000/users, http://localhost:4000/users/new, or even fill out a form and have your data be stored to a database.</p>

<p>Let's take a closer look at what happens. Run the following within your app's directory in terminal:</p>

<p>```
$ rake routes</p>

<p>```
You should get output similar to this:</p>

<p>```</p>

<pre><code>    users GET    /users(.:format)          users#index
          POST   /users(.:format)          users#create
 new_user GET    /users/new(.:format)      users#new
edit_user GET    /users/:id/edit(.:format) users#edit
     user GET    /users/:id(.:format)      users#show
          PUT    /users/:id(.:format)      users#update
          DELETE /users/:id(.:format)      users#destroy
     rsvp GET    /rsvp(.:format)           users#new
     root        /                         users#home
</code></pre>

<p>```</p>

<p>Rails has created all of these routes for you with just that one line of code.</p>

<p>Now, do the following:</p>

<p><strong>1. Comment out 'resources :users' in routes.rb.</strong><br></br>
<strong>2. Insert this code into routes.rb:</strong></p>

<p>``` ruby</p>

<p>  get '/users' => 'users#index'
  post '/users' => 'users#create'
  get '/users/new' => 'users#new', :as => :new_user
  get '/users/:id/edit' => 'users#edit', :as => :edit_user
  get '/users/:id' => 'users#show', :as => :user</p>

<p>  put '/users/:id' => 'users#update'
  delete '/users/:id' => 'users#destroy'</p>

<p>```</p>

<p><strong>3. Run 'rake routes' again within terminal. Your output should be the same as before.</strong></p>

<p><strong>4. Think about what Rails just did. Anytime you generate a new scaffold/resource, the above routes are automatically created so you don't have to go through the trouble of writing them yourself. Thanks Rails!</strong></p>

<p>If anyone has other helpful tidbits on rails routes, please link to them in the comments section below.</p>
]]></content>
  </entry>
  
</feed>
