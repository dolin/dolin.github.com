<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Adventures Into Code]]></title>
  <link href="http://dolin.github.com/atom.xml" rel="self"/>
  <link href="http://dolin.github.com/"/>
  <updated>2013-04-09T20:05:49-04:00</updated>
  <id>http://dolin.github.com/</id>
  <author>
    <name><![CDATA[Danny Olinsky]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Code and the Learning Curve]]></title>
    <link href="http://dolin.github.com/blog/2013/04/09/code-and-the-learning-curve/"/>
    <updated>2013-04-09T19:24:00-04:00</updated>
    <id>http://dolin.github.com/blog/2013/04/09/code-and-the-learning-curve</id>
    <content type="html"><![CDATA[<p><a href="https://play.google.com/store/apps/details?id=com.westriversw.b1to50&hl=en">1 to 50</a>, one of the simplest, but most addicting apps out there. A couple students told me about the game a few weeks back and ever since it has become my go-to for killing time on the subway. The concept is simple: find and click the numbers on the grid in order from 1 to 50 as fast as possible.</p>

<p><img src="http://dolin.github.com/images/1to50.jpg"></p>

<p>My first few results were quite bad. 50 seconds. 48 seconds. 47 seconds. However, without consciously trying, my brain quickly adapted to the task at hand. It began looking for patterns, seeking the fastest way to complete the puzzle based on my prior experience. My eyes began to scan the complete grid instead of looking and pecking for individual numbers. Groups of numbers started appearing and within 10 tries I had cut my time average time down to 34 seconds. Unfortunately, I&#8217;ve now had the app for two weeks and can&#8217;t seem to beat my high score from a week ago of 26 seconds.</p>

<p>What happened? Why can&#8217;t I keep learning at the same pace? Turns out, 1 to 50 follows Hermann Ebbinghaus&#8217; learning curve.</p>

<p><img src="http://dolin.github.com/images/lcurve.png"></p>

<p>1 to 50 is a simple a simple skill. I learned most of what I could learn in a short period of time and have asymptoted out.</p>

<p>How does this apply at all to code?</p>

<p>At first, I came to the conclusion that code follows a similiar learning curve. A beginner coder is a sponge ready to absorb and retain all information thrown his or her way. Wrong. Coding follows the S-Curve.</p>

<p><img src="http://dolin.github.com/images/scurve.png"></p>

<p>In this situation, learning starts off slowly and once a foundation is built, begins to increase rapidly. I&#8217;d guess that this is the exact reason why Flatiron assigns 100 hours of pre-work before the program starts. It takes time to prep your brain for learning how to code. However, once you make your way out of the weeds, the pieces begin to fall into place. As with 1 to 50, your brain subconsciously looks for, detects, and provides meaning to patterns based on past experiences.</p>

<p>Steve Klapnick alluded to this concept when he came in to speak to the class. While I don&#8217;t remember the exact quote, it went something like, &#8220;The difference between beginner coders and advanced coders is their ability to spot patterns.&#8221;</p>

<p>This idea rang true for me over the weekend. I&#8217;ve been building an online coding activity tracker with my group over the past few weeks. The app let&#8217;s you track your own progress as well as compare yourself to students in your class. Building the intial the database schema along with the ability for users to create/join classes took a couple days. It was our first real foray into rails. Here&#8217;s a shot three weeks in. Props to <a href="http://students.flatironschool.com/tyler-davis">Tyler Davis</a> for the awesome design.</p>

<p><img src="http://dolin.github.com/images/starboard.png"></p>

<p>Fast forward to this past weekend when myself and two other students decided to start on a hackathon organizer and listings app called Codewithus. Although the tables are named differently, the basic functionality of being able to create a hackathon, invite people to the hackathon, and join other hackathons is the same. Instead of a day to discuss and build the database schema, it took us 45 minutes. Instead of a day to build out the initial views and the basic functionality, it took us 2 hours (excuse my minimal design skills). Stepping back from the project, I&#8217;ve realized just how much myself and the rest of the class has learned in a short time period.</p>

<p><img src="http://dolin.github.com/images/codewithus.png"></p>

<p>While there&#8217;s a never ending amount amount of articles to read, languages to learn, and features to implement, it feels good to know we&#8217;re climbing up the curve.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making a Simple Rake Task]]></title>
    <link href="http://dolin.github.com/blog/2013/03/26/making-a-simple-rake-task/"/>
    <updated>2013-03-26T19:29:00-04:00</updated>
    <id>http://dolin.github.com/blog/2013/03/26/making-a-simple-rake-task</id>
    <content type="html"><![CDATA[<p>Last week, we began our group projects at the school. From here on out we&#8217;ll be building everyday, allday. My group is working on Starboard, an online coding activity tracker. At its core, you earn achievements for different activities such as writing blog posts, commiting to open source projects on Github, and earning badges on Codeschool/Treehouse. To picture the concept, think of the charts when you were a kid at school and your teachers gave you those gold star stickers for doing good things. You were able to not only see your stars, but also how you compared to your fellow students. Similiarly, future Flatiron students will be able to track their coding activities and see how they stack up to the rest of the class.</p>

<p><strong>Why is a rake task needed?</strong></p>

<p>The main data engine driving Starboard is the wrapper we&#8217;ve built to extract information from our sources (currently Github, Treehouse, Codeschool, your blog). Stay tuned for another blog post on how we did this. When you first sign-up, you&#8217;ll be prompted to enter in your usernames/urls, so that we can go out and populate your profile with current achievements. We&#8217;ll be vastly improving the interface, but here&#8217;s our V1 for the profile page to give you a better idea:</p>

<p><img src= /images/starboard-profile.png></p>

<p>After we populate your profile, we&#8217;ll also have to check for new achievements at scheduled intervals. To do this, we first need to implement a rake task. This rake task will be called by a cron job eventually, but for now we can call it manually to update all users&#8217; achievements.</p>

<p>Here&#8217;s the code for our rake task, found at app/lib/tasks/achievements.rake:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">namespace</span> <span class="ss">:achievements</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;Check for new user achievements&quot;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:update</span> <span class="o">=&gt;</span> <span class="ss">:environment</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">User</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="o">|</span>
</span><span class='line'>      <span class="n">user</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>&#8216;namespace&#8217; and &#8216;task&#8217; let us define the name of our task. In this case, we would run <strong>rake achievements:update</strong> in our console to run the task. The meat of this task is querying our database for all of our users and then calling rails&#8217; save method for each user. To update each user&#8217;s data, we have a couple callbacks in the User model that are run before the user is actually saved.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">before_save</span> <span class="ss">:check_blog</span><span class="p">,</span>
</span><span class='line'>              <span class="ss">:get_external_data</span>
</span><span class='line'>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>For a quick example, here are the number of stars I had before writing this post (we give one star for writing one blog post).</p>

<p><img src= /images/blogstars.png></p>

<p>The rake task.</p>

<p><img src= /images/raketask.png></p>

<p>And finally, my updated stars.</p>

<p><img src= /images/blogstars2.png></p>

<p>Just like that we can update all of our users&#8217; data with one command. Pretty cool.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding Nested Attributes]]></title>
    <link href="http://dolin.github.com/blog/2013/03/17/understanding-nested-attributes/"/>
    <updated>2013-03-17T15:06:00-04:00</updated>
    <id>http://dolin.github.com/blog/2013/03/17/understanding-nested-attributes</id>
    <content type="html"><![CDATA[<p>Let&#8217;s talk about rails&#8217; accepts_nested_attributes_for method.</p>

<p><strong>What is it?</strong></p>

<p>According to Rails API, the method allows you to &#8216;save attributes on associated records through the parent.&#8221;</p>

<p><strong>What does that mean and why should you use it?</strong></p>

<p>Using an example from class, let&#8217;s pretend you&#8217;re creating an app built around horse races. In your app, you have a race model and a horse model. A race has a name and a horse has a name, number, and starting position.</p>

<p>You also have a view to create a new race. When you create a new race you want to populate the race with horses. For simplicity sake, we&#8217;ll only populate the race with one horse for now.</p>

<p>You soon realize that you can&#8217;t figure out a way to create a new horse within a race using the form_for @race helper.</p>

<p><strong>Enter accepts_nested_attributes_for.</strong></p>

<p>Essentially, the method allows you to create a new instance of a horse with it&#8217;s respective attributes at the exact same time of creating the &#8216;parent&#8217; race.</p>

<p>Enter the following into your race model (I am assuming you have already setup the respective database associations):</p>

<p><img src='https://www.evernote.com/shard/s37/sh/03ff5816-2d94-4e54-999e-1838a32c56a7/124e37523a7e02b1e973768156ea6752/res/dfafff18-2618-4eb6-9402-858780bb8dc7/skitch.png'></p>

<p>Enter the following into your new race view:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="n">form_for</span> <span class="vi">@race</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span>
</span><span class='line'><span class="x">  &lt;p&gt;Name </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:name</span> <span class="cp">%&gt;</span><span class="x">&lt;/p&gt;</span>
</span><span class='line'><span class="x">  &lt;p&gt;Description </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:description</span> <span class="cp">%&gt;</span><span class="x">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="x">   </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">fields_for</span> <span class="ss">:horses</span> <span class="k">do</span> <span class="o">|</span><span class="n">h</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    &lt;p&gt;Horse Name </span><span class="cp">&lt;%=</span> <span class="n">h</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:name</span> <span class="cp">%&gt;</span><span class="x">&lt;/p&gt;</span>
</span><span class='line'><span class="x">    &lt;p&gt;Horse Number </span><span class="cp">&lt;%=</span> <span class="n">h</span><span class="o">.</span><span class="n">number_field</span> <span class="ss">:number</span> <span class="cp">%&gt;</span><span class="x">&lt;/p&gt;</span>
</span><span class='line'><span class="x">    &lt;p&gt;Horse Position </span><span class="cp">&lt;%=</span> <span class="n">h</span><span class="o">.</span><span class="n">number_field</span> <span class="ss">:position</span> <span class="cp">%&gt;</span><span class="x">&lt;/p&gt;</span>
</span><span class='line'><span class="x">  </span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">submit</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s inspect one of the attribute fields for the horse.</p>

<p><img src='https://www.evernote.com/shard/s37/sh/87cfaa77-1197-4b8a-81d0-2a200a4d2c0e/b6e6cc4e100158dc30a040962ee692a3/res/8cc5f3a8-b9ff-4742-a261-f9983ec42291/skitch.png'></p>

<p>If we click on &#8216;Create Race&#8217; and raise params before the race is saved, we will get the following:</p>

<p><img src='https://www.evernote.com/shard/s37/sh/47e5986f-1b1e-4d89-9aca-589b5eab46ed/f2d62dd12a80777d85e55c4b33be8a96/res/286437b8-ce06-406b-be12-85fb2646adc2/skitch.png'></p>

<p>As you can see, the paramaters being passed through to the controller for a horse come in the form of race[horses_attributes][0][{attribute}]. horses_attributes is a hash nested within params[:race]</p>

<p>Make sure your create action in your race controller looks something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>      <span class="vi">@race</span> <span class="o">=</span> <span class="no">Race</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:race</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="vi">@race</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>        <span class="n">redirect_to</span> <span class="vi">@race</span><span class="p">,</span> <span class="ss">notice</span><span class="p">:</span> <span class="s1">&#39;Race was successfully created.&#39;</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">render</span> <span class="ss">action</span><span class="p">:</span> <span class="s2">&quot;new&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Just like that you&#8217;ll be able to create horses within your races thanks to mass-assignment. Now let&#8217;s look at what the method is actually doing.</p>

<h4>1st level of abstraction down:</h4>

<p>Instead of using &#8216;accepts_nested_attributes_for&#8217;, we can substitute a writer method in your race model.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Race</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">attr_accessible</span> <span class="ss">:description</span><span class="p">,</span> <span class="ss">:name</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:horse_races</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:horses</span><span class="p">,</span> <span class="ss">:through</span> <span class="o">=&gt;</span> <span class="ss">:horse_races</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">horses_attributes</span><span class="o">=</span><span class="p">(</span><span class="nb">hash</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">hash</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">horse_index</span><span class="p">,</span> <span class="n">horse_attributes</span><span class="o">|</span>
</span><span class='line'>      <span class="n">horse</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">horses</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>      <span class="n">horse_attributes</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">horse_attribute</span><span class="p">,</span> <span class="n">attribute_value</span><span class="o">|</span>
</span><span class='line'>        <span class="n">horse</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">horse_attribute</span><span class="si">}</span><span class="s2">=&quot;</span><span class="p">,</span> <span class="n">attribute_value</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>During mass-assignment from your race controller, the horses_attributes= method will be called and a new horse will be created from this iteration.</p>

<h4>2nd level of abstraction down:</h4>

<p>If you&#8217;re like me when you first tried to figure out what&#8217;s going on beneath the hood, you may have written the code in your race controller to handle the task. I initially iterated through the params for both race and horse attributes, assigning the attributes one by one.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">RacesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="vi">@race</span> <span class="o">=</span> <span class="no">Race</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
</span><span class='line'>    <span class="vi">@race</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:race</span><span class="o">][</span><span class="ss">:name</span><span class="o">]</span>
</span><span class='line'>    <span class="vi">@race</span><span class="o">.</span><span class="n">description</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:race</span><span class="o">][</span><span class="ss">:description</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="n">params</span><span class="o">[</span><span class="ss">:race</span><span class="o">][</span><span class="ss">:horses_attributes</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">horse_index</span><span class="p">,</span> <span class="n">horse_data</span><span class="o">|</span>
</span><span class='line'>      <span class="vi">@horse</span> <span class="o">=</span> <span class="no">Horse</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>      <span class="vi">@horse</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">horse_data</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@horse</span><span class="o">.</span><span class="n">number</span> <span class="o">=</span> <span class="n">horse_data</span><span class="o">[</span><span class="ss">:number</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@horse</span><span class="o">.</span><span class="n">position</span> <span class="o">=</span> <span class="n">horse_data</span><span class="o">[</span><span class="ss">:position</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>      <span class="vi">@race</span><span class="o">.</span><span class="n">horses</span> <span class="o">&lt;&lt;</span> <span class="vi">@horse</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@race</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>      <span class="n">redirect_to</span> <span class="vi">@race</span><span class="p">,</span> <span class="ss">notice</span><span class="p">:</span> <span class="s1">&#39;Race was successfully created.&#39;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">render</span> <span class="ss">action</span><span class="p">:</span> <span class="s2">&quot;new&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This way works to get the job done, but it&#8217;s best to take the code out of your controller and create a writer method as shown above in your race model. Or better yet, just use the &#8216;accepts_nested_attributes_for&#8217; method and don&#8217;t worry about creating the writer method at all.</p>

<p>I hope this helps for anyone looking to better understand nested attributes. Feel free to comment below if there are any questions!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding Rails' Routes]]></title>
    <link href="http://dolin.github.com/blog/2013/03/04/understanding-rails-routes/"/>
    <updated>2013-03-04T22:03:00-05:00</updated>
    <id>http://dolin.github.com/blog/2013/03/04/understanding-rails-routes</id>
    <content type="html"><![CDATA[<p>We began our foray into Rails last week. As expected, a ton of questions immediately came to mind once diving into a few tutorials. This post will address the routes that Rails automatically builds upon generation of resources and scaffolds.</p>

<p>As a Ruby framework, Rails essentially creates your application&#8217;s skeleton so that the programmer can get right to building the muscle of the app (not sure if that analogy makes sense, but sounded good at the time).</p>

<p>In creating the skeleton, Rails abstracts out many parts of your application into files that it has already created. For a Ruby newb, this is both incredible and confusing. It&#8217;s an awesome feeling to be able to startup the rails server, edit the controller, create a view or two with some forms, and automagically see your code in action. But, the hidden logic which lies within a new Rails&#8217; application begs the question, &#8220;How does all of this actually work?&#8221;</p>

<p>While there are a ton of books to learn about the ins and outs of Rails, let&#8217;s take a look at one small, but extremely important piece: <strong>routes</strong>.</p>

<p>Let&#8217;s pretend you have created a new rails app for RSVPing to an event. To kick things off, you run the following in terminal to generate a User resource:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rails generate scaffold User
</span></code></pre></td></tr></table></div></figure>


<p>Along with creating a controller, model, migration, and other files, Rails also creates routes for you. Take a look within your config directory and you&#8217;ll see a &#8216;routes.rb&#8217; file. Within the first few lines, you should see something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">RsvpApp</span><span class="p">:</span><span class="ss">:Application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">resources</span> <span class="ss">:users</span>
</span></code></pre></td></tr></table></div></figure>


<p>This one line of code blew my mind. All of a sudden (if you created the respective views and controller actions), you could navigate to paths such as http://localhost:4000/users, http://localhost:4000/users/new, or even fill out a form and have your data be stored to a database.</p>

<p>Let&#8217;s take a closer look at what happens. Run the following within your app&#8217;s directory in terminal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">rake</span> <span class="n">routes</span>
</span></code></pre></td></tr></table></div></figure>


<p>You should get output similar to this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>    <span class="n">users</span> <span class="no">GET</span>    <span class="sr">/users(.:format)          users#index</span>
</span><span class='line'><span class="sr">          POST   /use</span><span class="n">rs</span><span class="p">(</span><span class="o">.</span><span class="ss">:format</span><span class="p">)</span>          <span class="n">users</span><span class="c1">#create</span>
</span><span class='line'> <span class="n">new_user</span> <span class="no">GET</span>    <span class="sr">/users/ne</span><span class="n">w</span><span class="p">(</span><span class="o">.</span><span class="ss">:format</span><span class="p">)</span>      <span class="n">users</span><span class="c1">#new</span>
</span><span class='line'><span class="n">edit_user</span> <span class="no">GET</span>    <span class="sr">/users/</span><span class="ss">:id</span><span class="o">/</span><span class="n">edit</span><span class="p">(</span><span class="o">.</span><span class="ss">:format</span><span class="p">)</span> <span class="n">users</span><span class="c1">#edit</span>
</span><span class='line'>     <span class="n">user</span> <span class="no">GET</span>    <span class="sr">/users/</span><span class="ss">:id</span><span class="p">(</span><span class="o">.</span><span class="ss">:format</span><span class="p">)</span>      <span class="n">users</span><span class="c1">#show</span>
</span><span class='line'>          <span class="no">PUT</span>    <span class="sr">/users/</span><span class="ss">:id</span><span class="p">(</span><span class="o">.</span><span class="ss">:format</span><span class="p">)</span>      <span class="n">users</span><span class="c1">#update</span>
</span><span class='line'>          <span class="no">DELETE</span> <span class="sr">/users/</span><span class="ss">:id</span><span class="p">(</span><span class="o">.</span><span class="ss">:format</span><span class="p">)</span>      <span class="n">users</span><span class="c1">#destroy</span>
</span><span class='line'>     <span class="n">rsvp</span> <span class="no">GET</span>    <span class="sr">/rsvp(.:format)           users#new</span>
</span><span class='line'><span class="sr">     root        /</span>                         <span class="n">users</span><span class="c1">#home</span>
</span></code></pre></td></tr></table></div></figure>


<p>Rails has created all of these routes for you with just that one line of code.</p>

<p>Now, do the following:</p>

<p><strong>1. Comment out &#8216;resources :users&#8217; in routes.rb.</strong><br></br>
<strong>2. Insert this code into routes.rb:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">get</span> <span class="s1">&#39;/users&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;users#index&#39;</span>
</span><span class='line'>  <span class="n">post</span> <span class="s1">&#39;/users&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;users#create&#39;</span>
</span><span class='line'>  <span class="n">get</span> <span class="s1">&#39;/users/new&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;users#new&#39;</span><span class="p">,</span> <span class="ss">:as</span> <span class="o">=&gt;</span> <span class="ss">:new_user</span>
</span><span class='line'>  <span class="n">get</span> <span class="s1">&#39;/users/:id/edit&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;users#edit&#39;</span><span class="p">,</span> <span class="ss">:as</span> <span class="o">=&gt;</span> <span class="ss">:edit_user</span>
</span><span class='line'>  <span class="n">get</span> <span class="s1">&#39;/users/:id&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;users#show&#39;</span><span class="p">,</span> <span class="ss">:as</span> <span class="o">=&gt;</span> <span class="ss">:user</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">put</span> <span class="s1">&#39;/users/:id&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;users#update&#39;</span>
</span><span class='line'>  <span class="n">delete</span> <span class="s1">&#39;/users/:id&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;users#destroy&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>3. Run &#8216;rake routes&#8217; again within terminal. Your output should be the same as before.</strong></p>

<p><strong>4. Think about what Rails just did. Anytime you generate a new scaffold/resource, the above routes are automatically created so you don&#8217;t have to go through the trouble of writing them yourself. Thanks Rails!</strong></p>

<p>If anyone has other helpful tidbits on rails routes, please link to them in the comments section below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating My Songkick-to-Calendar App]]></title>
    <link href="http://dolin.github.com/blog/2013/02/23/creating-my-first-ruby-app/"/>
    <updated>2013-02-23T14:58:00-05:00</updated>
    <id>http://dolin.github.com/blog/2013/02/23/creating-my-first-ruby-app</id>
    <content type="html"><![CDATA[<p>Last week, myself and two other Flatiron students were assigned with building and presenting our own ruby command line interface (CLI) applications. The task at hand was to combine a data source with a messaging service in order to make something useful. Here&#8217;s the process I went through to create <a href="https://github.com/dolin/songkick-to-cal/" target="_blank">my first useful ruby app.</a></p>

<h3><strong>1. Idea.</strong></h3>


<p>Concert listing scraper that asks for user input and automatically adds events of your favorite artists to your calendar.</p>

<p>The final product:</p>

<p><img src="http://s11.postimage.org/iav6sea2b/Screen_Shot_2013_02_26_at_4_59_01_PM.png"></p>

<p>Songkick found two Beyonce shows on August 3rd and 4th at the Barclays Center in Brooklyn, NY. Both files were created in the current directory. Below I&#8217;ve opened the files with iCal.</p>

<p><img src="http://s17.postimage.org/m48aa7s7j/Screen_Shot_2013_02_26_at_5_07_07_PM.png"></p>

<h3><strong>2. Oh shit.</strong></h3>


<p>I actually have to build this thing and don&#8217;t know where to start. It&#8217;s Monday and the app needs to ready to roll by Thursday.</p>

<h3><strong>3. Break it down.</strong></h3>


<p>My initial excitement to build a concert parser had quickly turned into a wall of stress and doubt. Avi could tell that I started to quit on the project and told me that I needed to both figuratively break down the wall and literally break down the problem. He was right. As a beginner dev, it&#8217;s easy to be consumed by the idea of the final product without realizing that the overarching big problem is really just a set of interweaving easier problems.</p>

<h3><strong>4. Pseudocode.</strong></h3>


<p>Pseudocode essentially solved this problem for me. Unfortunately, I must have written over my initial code, but it went something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># get artist from user
</span><span class='line'>
</span><span class='line'># get location from user
</span><span class='line'>
</span><span class='line'># use location to lookup the location id using Songkick API
</span><span class='line'>
</span><span class='line'># use songkickr gem with artist name and location id to fetch data for each show
</span><span class='line'>
</span><span class='line'># create hash to store event name and date from songkickr gem results
</span><span class='line'>
</span><span class='line'># create ical files from hash
</span></code></pre></td></tr></table></div></figure>




<h3><stong>5. Build the parts individually.</strong></h3>


<p>The two core pieces of functionality needed for my app to work hinged on creating ical files and fetching data from Songkick&#8217;s API. While there would eventually have to be code that ties these two pieces together, it made the most sense to me to write them separately (again, breaking the problem down to smaller parts). Here&#8217;s the inital code I wrote to create an ical file. Most of it comes directly from the Icalendar gem.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cal</span> <span class="o">=</span> <span class="no">Calendar</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">event</span> <span class="o">=</span> <span class="no">Event</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">event</span><span class="o">.</span><span class="n">start</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'><span class="n">event</span><span class="o">.</span><span class="n">summary</span> <span class="o">=</span> <span class="s2">&quot;This is the event&#39;s summary&quot;</span>
</span><span class='line'><span class="n">cal</span><span class="o">.</span><span class="n">add_event</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s1">&#39;testing&#39;</span><span class="o">.</span><span class="n">ics</span><span class="s2">&quot;, &#39;w+&#39;) do |f|</span>
</span><span class='line'><span class="s2">      f &lt;&lt; cal.to_ical</span>
</span><span class='line'><span class="s2">    end</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Eventually I would have to fill in event.start, event.summary, and the filename with variables, but all I wanted to do at this point was make sure that the creation of files worked properly.</p>

<p>Similiarly, I hardcoded artist/location information into the songkickr gem to make sure it returned data for upcoming Beyonce shows in NYC. The gem is essentially a Songkick API wrapper that performs the API call and fetching of the concert data for you.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">remote</span> <span class="o">=</span> <span class="ss">Songkickr</span><span class="p">:</span><span class="ss">:Remote</span><span class="o">.</span><span class="n">new</span> <span class="s1">&#39;Your Songkick API Key&#39;</span>
</span><span class='line'><span class="n">remote</span><span class="o">.</span><span class="n">events</span><span class="p">(</span><span class="ss">:artist_name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Beyonce&quot;</span><span class="p">,</span> <span class="ss">:location</span> <span class="o">=&gt;</span> <span class="s2">&quot;sk:7644&quot;</span><span class="p">,</span> <span class="ss">:min_date</span> <span class="o">=&gt;</span> <span class="s2">&quot;2013-02-20&quot;</span><span class="p">,</span> <span class="ss">:max_date</span> <span class="o">=&gt;</span> <span class="s2">&quot;2013-10-31&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sidenote: Unless I am mistaken, it turned out that the Songkickr gem cannot accept a location such as &#8216;NYC&#8217; and instead must have an &#8216;sk:id&#8217; that points to a location (i.e. sk:7644 above points to NYC). Because of this, I needed to call Songkick&#8217;s API myself in order to return a location id. That location id was then used in the songkickr gem. Here&#8217;s the code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;open-uri&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;json&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">doc</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&quot;http://api.songkick.com/api/3.0/search/locations.json?query=&#39;</span><span class="si">#{</span><span class="n">interpolate</span> <span class="n">user</span> <span class="n">location</span><span class="si">}</span><span class="s2">&#39;&amp;apikey=&#39;Your Songkick API Key&#39;).read</span>
</span><span class='line'><span class="s2">location_hash = JSON.parse(doc)</span>
</span><span class='line'><span class="s2">location_id = location_hash.flatten[1][&quot;</span><span class="n">results</span><span class="s2">&quot;][&quot;</span><span class="n">location</span><span class="s2">&quot;][0][&quot;</span><span class="n">metroArea</span><span class="s2">&quot;][&quot;</span><span class="nb">id</span><span class="s2">&quot;]</span>
</span></code></pre></td></tr></table></div></figure>




<h3><strong>6. Methodize.</strong></h3>


<p>After filling in my pseudocode with actual code, it became very clear that each piece of functionality needed to live within its own method. Also needed was a hash to store the event name and date. To accomplish this, I first created a &#8216;shows&#8217; hash. Next, I iterated over the results from the Songkickr gem, creating key-value pairs of event name and date within the &#8216;shows&#8217; hash. Finally, I created ical files by iterating over the hash, replacing previously hardcoded values with the new key value pairs of event name and date. See below for the complete gist.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="k">def</span> <span class="nf">create_event_hash</span>
</span><span class='line'>  <span class="vi">@event_results</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">event</span><span class="o">|</span>
</span><span class='line'>    <span class="vi">@shows</span><span class="o">[</span><span class="n">event</span><span class="o">.</span><span class="n">display_name</span><span class="o">]</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="n">start</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">create_files</span>
</span><span class='line'>  <span class="vi">@shows</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">display_name</span><span class="p">,</span> <span class="n">date</span><span class="o">|</span>
</span><span class='line'>    <span class="n">cal</span> <span class="o">=</span> <span class="no">Calendar</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="n">event</span> <span class="o">=</span> <span class="no">Event</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="n">event</span><span class="o">.</span><span class="n">start</span> <span class="o">=</span> <span class="n">date</span>
</span><span class='line'>    <span class="n">event</span><span class="o">.</span><span class="n">summary</span> <span class="o">=</span> <span class="n">display_name</span>
</span><span class='line'>    <span class="n">cal</span><span class="o">.</span><span class="n">add_event</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;&#39;</span><span class="si">#{</span><span class="n">display_name</span><span class="si">}</span><span class="s2">&#39;.ics&quot;</span><span class="p">,</span> <span class="s1">&#39;w+&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>          <span class="n">f</span> <span class="o">&lt;&lt;</span> <span class="n">cal</span><span class="o">.</span><span class="n">to_ical</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<h3><strong>7. Object-orient&#8230;ish.</strong></h3>


<p>Being only a few weeks into really learning code, I&#8217;m still wrapping my head around object orientation. I understand the theory, but it&#8217;s a challenge to implement a variety of classes that do the right things and play nicely with each other. So, for the sake of time, I decided to create one giant class called &#8216;Result.&#8217; The Result class contains a method called &#8216;run&#8217; which essentially fires off each method in order.</p>

<p>Moving forward, I plan to refactor the code into multiple classes and also integrate the app with Google Calendar.</p>

<h3><strong>8. Next Steps.</strong></h3>


<p>I couldn&#8217;t believe that by Thursday I had a tangible, presentable, functioning version of a product that was in my head three days previously. I&#8217;ve never been able to say that before and I think that&#8217;s pretty cool. Stay tuned for the presentation video.</p>

<p>If anyone has feedback on my code or suggestions for the type of classes to build, I&#8217;d be all ears.</p>

<p>&#8230;now back to work.</p>

<div><script src='https://gist.github.com/5024843.js'></script>
<noscript><pre><code></code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[4 Reasons To Learn To Code]]></title>
    <link href="http://dolin.github.com/blog/2013/02/12/4-reasons-to-learn-to-code/"/>
    <updated>2013-02-12T09:13:00-05:00</updated>
    <id>http://dolin.github.com/blog/2013/02/12/4-reasons-to-learn-to-code</id>
    <content type="html"><![CDATA[<p>Everyone has their own reasons for learning how to code. Here are mine.</p>

<p><strong>To create products.</strong></p>

<p>I’ve been a musician since learning guitar at 12 and have always been driven by the creative process. The concept of creating something from nothing that makes my life and others&#8217; lives better as well is pretty cool.</p>

<p><strong>To execute on a vision.</strong></p>

<p>We’ve all seen this one before: business guy comes up with an idea, stays up all night thinking about it, scribbles the business model down along with an outlined marketing/sales plan, and then realizes he’s stuck. How is he going to execute? How is he going to create a MVP to begin testing his hypotheses? The short answer - he’s not unless he gets a tech guy to join him. Most likely, he’ll search through his network contacting developers only to find that they are all working on ideas of their own. I’m tired of having to rely on someone else to bring my ideas to life.</p>

<p><strong>To build a foundation (for learning code the rest of my life).</strong></p>

<p>Twenty years from now, I don’t see there being nearly as much of a distinction in the startup world between business and tech guys/gals. Coding will become part of schools’ curriculums, similar to learning a new language. It will be expected for most CEO’s to have solid technical background. Without one, it will be harder to raise capital, build a team, and execute on a vision. This trend is already on the rise and I plan to get a head start, rather than fall behind.</p>

<p><strong>To impact the world.</strong></p>

<p>Yes, maybe it’s cheesy, but we all search for meaning in our lives and it’s hard for me to think of a better way to impact millions of people around the world.</p>

<p>That&#8217;s it for now. If you recently made the jump as well, what were your reasons?</p>
]]></content>
  </entry>
  
</feed>
